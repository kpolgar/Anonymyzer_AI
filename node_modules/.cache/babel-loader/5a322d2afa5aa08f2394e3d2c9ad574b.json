{"ast":null,"code":"var _jsxFileName = \"/Users/makosguba/Desktop/Anonymyzer_AI/Anonymyzer_AI/src/components/BlurFaces/BlurFaces.js\";\nimport React, { Component } from 'react';\nimport { createCanvas, loadImage } from 'canvas';\nimport { Button } from 'reactstrap';\nimport \"./BlurFaces.css\";\nexport default class BlurFaces extends Component {\n  getFaces(data) {\n    console.log('data', data); //result.outputs[0].data.regions[0].region_info.bounding_box\n    //[top_row, left_col, bottom_row, right_col]\n\n    return data.map(face => ({\n      x: face.region_info.bounding_box.left_col * this.props.image.width,\n      y: face.region_info.bounding_box.top_row * this.props.image.height,\n      w: face.region_info.bounding_box.right_col * this.props.image.width - face.region_info.bounding_box.left_col * this.props.image.width,\n      h: face.region_info.bounding_box.bottom_row * this.props.image.height - face.region_info.bounding_box.top_row * this.props.image.height // x: face.upperLeft.x,\n      // y: face.upperLeft.y,\n      // w: face.lowerRight.x - face.upperLeft.x,\n      // h: face.lowerRight.y - face.upperLeft.y\n\n    }));\n  }\n\n  download() {\n    console.log('trying to download');\n    var canvas = document.getElementById(\"canvas\");\n    var url = canvas.toDataURL(\"image/png\");\n    var link = document.createElement('a');\n    link.download = 'blurred_image.png';\n    link.href = document.getElementById('canvas').toDataURL();\n    link.click();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      image,\n      threshold,\n      data,\n      smooth\n    } = this.props; // If no data\n\n    if (!data || data.length < 1) return; // Output Canvas and Context\n\n    const outputCanvas = this.refs.canvas;\n    const outputCtx = outputCanvas.getContext('2d'); // Hidden Canvas and Context\n\n    const hiddenCanvas = createCanvas(image.width, image.height);\n    const hiddenCtx = hiddenCanvas.getContext('2d'); // If data, threshold and smooth is the same then clear and return     (user has not clicked blur)\n\n    if (JSON.stringify(prevProps.data) === JSON.stringify(data) && prevProps.threshold === threshold && prevProps.smooth === smooth) {\n      outputCtx.clearRect(0, 0, image.width, image.height);\n      return;\n    } /// Load Image\n\n\n    loadImage(image.uri).then(newImage => {\n      this.props.onBlurredImage();\n\n      if (smooth) {\n        // New canvases for applying blurring and feathering (canvases for inverted mask of blurred images)\n        const imaskCanvas = createCanvas(image.width, image.height);\n        const imaskCtx = imaskCanvas.getContext('2d');\n        const imaskCanvas2 = createCanvas(image.width, image.height);\n        const imaskCtx2 = imaskCanvas2.getContext('2d'); // Set global composite operation to destination in\n\n        imaskCtx.globalCompositeOperation = \"destination-in\";\n        this.getFaces(data).forEach((face, i) => {\n          // Determine the blur amount by width of face\n          console.log(typeof data);\n          console.log(face.x, face.y, face.w, face.h);\n          let blurAmount = threshold;\n          if (face.w >= 300) blurAmount = threshold * 2.5;else if (face.w <= 30) blurAmount = threshold * 0.25; // Add blur filter  \n\n          hiddenCtx.filter = `blur(${blurAmount}px)`; // Draw original image to hidden canvas\n\n          hiddenCtx.drawImage(newImage, 0, 0, image.width, image.height); // Add blurred faces to blank canvas\n\n          imaskCtx.putImageData(hiddenCtx.getImageData(face.x - 10, face.y - 10, face.w + 20, face.h + 20), face.x - 10, face.y - 10);\n        }); // Draw blurred faces onto 2nd inverted mask canvas\n\n        imaskCtx2.drawImage(imaskCanvas, 0, 0);\n        imaskCtx2.shadowColor = \"black\"; // Required for feathering\n\n        imaskCtx2.shadowBlur = 30;\n        imaskCtx2.globalCompositeOperation = \"destination-in\"; // Feathering\n\n        imaskCtx2.shadowBlur = 20;\n        imaskCtx2.drawImage(imaskCanvas, 0, 0);\n        imaskCtx2.shadowBlur = 10;\n        imaskCtx2.drawImage(imaskCanvas, 0, 0); // Clear visible canvas then draw original image to it and then add the blurred images\n\n        outputCtx.clearRect(0, 0, image.width, image.height);\n        outputCtx.drawImage(newImage, 0, 0);\n        outputCtx.drawImage(imaskCanvas2, 0, 0);\n      } else {\n        hiddenCanvas.style.cssText = 'image-rendering: optimizeSpeed;' + 'image-rendering: -moz-crisp-edges;' + // FireFox\n        'image-rendering: -o-crisp-edges;' + // Opera\n        'image-rendering: -webkit-crisp-edges;' + // Chrome\n        'image-rendering: crisp-edges;' + // Chrome\n        'image-rendering: -webkit-optimize-contrast;' + // Safari\n        'image-rendering: pixelated; ' + // Future browsers\n        '-ms-interpolation-mode: nearest-neighbor;'; // IE\n        // Use nearest-neighbor scaling when images are resized instead of the resizing algorithm to create blur\n\n        hiddenCtx.webkitImageSmoothingEnabled = false;\n        hiddenCtx.mozImageSmoothingEnabled = false;\n        hiddenCtx.msImageSmoothingEnabled = false;\n        hiddenCtx.imageSmoothingEnabled = false; // We'll be pixelating the image by threshold\n\n        let percent = 0; // Set threshold to 9.8 if it's 10 so the blurred faces aren't rendered white\n\n        threshold === 10 ? percent = 1 - 9.8 / 10 : percent = 1 - threshold / 10; // Calculate the scaled dimensions\n\n        const scaledWidth = image.width * percent;\n        const scaledHeight = image.height * percent; // Render image smaller\n\n        hiddenCtx.drawImage(newImage, 0, 0, scaledWidth, scaledHeight); // Stretch the smaller image onto larger context\n\n        hiddenCtx.drawImage(hiddenCanvas, 0, 0, scaledWidth, scaledHeight, 0, 0, image.width, image.height); // Clear visible canvas and draw original image to it\n\n        outputCtx.clearRect(0, 0, image.width, image.height);\n        outputCtx.drawImage(newImage, 0, 0); // Draw pixelated faces to canvas\n\n        this.getFaces(data).forEach(face => outputCtx.putImageData(hiddenCtx.getImageData(face.x, face.y, face.w, face.h), face.x, face.y));\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props.image;\n    const {\n      data\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }\n    }, \"Output\")), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvas\",\n      ref: \"canvas\",\n      width: width,\n      height: height,\n      style: {\n        maxWidth: \"100%\",\n        maxHeight: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }), data && data.length ? /*#__PURE__*/React.createElement(Button, {\n      onClick: this.download,\n      color: \"info\",\n      size: \"lg\",\n      id: \"download_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, \"Download\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 10\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/makosguba/Desktop/Anonymyzer_AI/Anonymyzer_AI/src/components/BlurFaces/BlurFaces.js"],"names":["React","Component","createCanvas","loadImage","Button","BlurFaces","getFaces","data","console","log","map","face","x","region_info","bounding_box","left_col","props","image","width","y","top_row","height","w","right_col","h","bottom_row","download","canvas","document","getElementById","url","toDataURL","link","createElement","href","click","componentDidUpdate","prevProps","threshold","smooth","length","outputCanvas","refs","outputCtx","getContext","hiddenCanvas","hiddenCtx","JSON","stringify","clearRect","uri","then","newImage","onBlurredImage","imaskCanvas","imaskCtx","imaskCanvas2","imaskCtx2","globalCompositeOperation","forEach","i","blurAmount","filter","drawImage","putImageData","getImageData","shadowColor","shadowBlur","style","cssText","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingEnabled","percent","scaledWidth","scaledHeight","catch","err","render","maxWidth","maxHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,QAAxC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,iBAAP;AAEA,eAAe,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAE/CK,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB,EADW,CAIX;AACA;;AACE,WAAOA,IAAI,CAACG,GAAL,CAASC,IAAI,KAAK;AACvBC,MAAAA,CAAC,EAAGD,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BC,QAA/B,GAA2C,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,KADxC;AAEvBC,MAAAA,CAAC,EAAGR,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BM,OAA/B,GAA0C,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,MAFvC;AAGvBC,MAAAA,CAAC,EAAGX,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BS,SAA9B,GAA0C,KAAKP,KAAL,CAAWC,KAAX,CAAiBC,KAA5D,GAAsEP,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BC,QAA9B,GAAyC,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAH5G;AAIvBM,MAAAA,CAAC,EAAGb,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BW,UAA9B,GAA2C,KAAKT,KAAL,CAAWC,KAAX,CAAiBI,MAA7D,GAAwEV,IAAI,CAACE,WAAL,CAAiBC,YAAjB,CAA8BM,OAA9B,GAAwC,KAAKJ,KAAL,CAAWC,KAAX,CAAiBI,MAJ7G,CAKvB;AACA;AACA;AACA;;AARuB,KAAL,CAAb,CAAP;AAWD;;AAEDK,EAAAA,QAAQ,GAAE;AACRlB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,QAAIkB,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAb;AACA,QAAIC,GAAG,GAAGH,MAAM,CAACI,SAAP,CAAiB,WAAjB,CAAV;AACA,QAAIC,IAAI,GAAGJ,QAAQ,CAACK,aAAT,CAAuB,GAAvB,CAAX;AACAD,IAAAA,IAAI,CAACN,QAAL,GAAgB,mBAAhB;AACAM,IAAAA,IAAI,CAACE,IAAL,GAAYN,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCE,SAAlC,EAAZ;AACAC,IAAAA,IAAI,CAACG,KAAL;AACD;;AAELC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAM;AAAEpB,MAAAA,KAAF;AAASqB,MAAAA,SAAT;AAAoB/B,MAAAA,IAApB;AAA0BgC,MAAAA;AAA1B,QAAqC,KAAKvB,KAAhD,CAD4B,CAE5B;;AACA,QAAG,CAACT,IAAD,IAASA,IAAI,CAACiC,MAAL,GAAc,CAA1B,EAA6B,OAHD,CAK5B;;AACA,UAAMC,YAAY,GAAG,KAAKC,IAAL,CAAUf,MAA/B;AACA,UAAMgB,SAAS,GAAGF,YAAY,CAACG,UAAb,CAAwB,IAAxB,CAAlB,CAP4B,CAQ5B;;AACA,UAAMC,YAAY,GAAG3C,YAAY,CAACe,KAAK,CAACC,KAAP,EAAcD,KAAK,CAACI,MAApB,CAAjC;AACA,UAAMyB,SAAS,GAAGD,YAAY,CAACD,UAAb,CAAwB,IAAxB,CAAlB,CAV4B,CAY5B;;AACA,QACEG,IAAI,CAACC,SAAL,CAAeX,SAAS,CAAC9B,IAAzB,MAAmCwC,IAAI,CAACC,SAAL,CAAezC,IAAf,CAAnC,IACA8B,SAAS,CAACC,SAAV,KAAwBA,SADxB,IAEAD,SAAS,CAACE,MAAV,KAAqBA,MAHvB,EAIE;AACAI,MAAAA,SAAS,CAACM,SAAV,CAAoB,CAApB,EAAsB,CAAtB,EAAyBhC,KAAK,CAACC,KAA/B,EAAsCD,KAAK,CAACI,MAA5C;AACA;AACD,KApB2B,CAsB5B;;;AACAlB,IAAAA,SAAS,CAACc,KAAK,CAACiC,GAAP,CAAT,CAAqBC,IAArB,CAA2BC,QAAD,IAAc;AACtC,WAAKpC,KAAL,CAAWqC,cAAX;;AACE,UAAGd,MAAH,EAAU;AACN;AACA,cAAMe,WAAW,GAAGpD,YAAY,CAACe,KAAK,CAACC,KAAP,EAAcD,KAAK,CAACI,MAApB,CAAhC;AACA,cAAMkC,QAAQ,GAAGD,WAAW,CAACV,UAAZ,CAAuB,IAAvB,CAAjB;AACA,cAAMY,YAAY,GAAGtD,YAAY,CAACe,KAAK,CAACC,KAAP,EAAcD,KAAK,CAACI,MAApB,CAAjC;AACA,cAAMoC,SAAS,GAAGD,YAAY,CAACZ,UAAb,CAAwB,IAAxB,CAAlB,CALM,CAMN;;AACAW,QAAAA,QAAQ,CAACG,wBAAT,GAAoC,gBAApC;AACA,aAAKpD,QAAL,CAAcC,IAAd,EAAoBoD,OAApB,CAA4B,CAAChD,IAAD,EAAOiD,CAAP,KAAa;AACrC;AACApD,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,IAAnB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACC,CAAjB,EAAoBD,IAAI,CAACQ,CAAzB,EAA4BR,IAAI,CAACW,CAAjC,EAAoCX,IAAI,CAACa,CAAzC;AACA,cAAIqC,UAAU,GAAGvB,SAAjB;AACA,cAAG3B,IAAI,CAACW,CAAL,IAAU,GAAb,EAAkBuC,UAAU,GAAGvB,SAAS,GAAC,GAAvB,CAAlB,KACK,IAAG3B,IAAI,CAACW,CAAL,IAAU,EAAb,EAAiBuC,UAAU,GAAGvB,SAAS,GAAC,IAAvB,CANe,CAOrC;;AACAQ,UAAAA,SAAS,CAACgB,MAAV,GAAoB,QAAOD,UAAW,KAAtC,CARqC,CASrC;;AACAf,UAAAA,SAAS,CAACiB,SAAV,CAAoBX,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoCnC,KAAK,CAACC,KAA1C,EAAiDD,KAAK,CAACI,MAAvD,EAVqC,CAWrC;;AACAkC,UAAAA,QAAQ,CAACS,YAAT,CAAsBlB,SAAS,CAACmB,YAAV,CACpBtD,IAAI,CAACC,CAAL,GAAO,EADa,EAEpBD,IAAI,CAACQ,CAAL,GAAO,EAFa,EAGpBR,IAAI,CAACW,CAAL,GAAO,EAHa,EAIpBX,IAAI,CAACa,CAAL,GAAO,EAJa,CAAtB,EAKEb,IAAI,CAACC,CAAL,GAAO,EALT,EAMED,IAAI,CAACQ,CAAL,GAAO,EANT;AAQD,SApBH,EARM,CA6BH;;AACbsC,QAAAA,SAAS,CAACM,SAAV,CAAoBT,WAApB,EAAiC,CAAjC,EAAoC,CAApC;AACAG,QAAAA,SAAS,CAACS,WAAV,GAAwB,OAAxB,CA/BgB,CA+BiB;;AACjCT,QAAAA,SAAS,CAACU,UAAV,GAAuB,EAAvB;AACAV,QAAAA,SAAS,CAACC,wBAAV,GAAqC,gBAArC,CAjCgB,CAkChB;;AACAD,QAAAA,SAAS,CAACU,UAAV,GAAuB,EAAvB;AACAV,QAAAA,SAAS,CAACM,SAAV,CAAoBT,WAApB,EAAgC,CAAhC,EAAkC,CAAlC;AACAG,QAAAA,SAAS,CAACU,UAAV,GAAuB,EAAvB;AACAV,QAAAA,SAAS,CAACM,SAAV,CAAoBT,WAApB,EAAgC,CAAhC,EAAkC,CAAlC,EAtCgB,CAuChB;;AACAX,QAAAA,SAAS,CAACM,SAAV,CAAoB,CAApB,EAAsB,CAAtB,EAAyBhC,KAAK,CAACC,KAA/B,EAAsCD,KAAK,CAACI,MAA5C;AACAsB,QAAAA,SAAS,CAACoB,SAAV,CAAoBX,QAApB,EAA8B,CAA9B,EAAiC,CAAjC;AACAT,QAAAA,SAAS,CAACoB,SAAV,CAAoBP,YAApB,EAAkC,CAAlC,EAAqC,CAArC;AACD,OA3CO,MA2CD;AACHX,QAAAA,YAAY,CAACuB,KAAb,CAAmBC,OAAnB,GAA6B,oCAC7B,oCAD6B,GACU;AACvC,0CAF6B,GAES;AACtC,+CAH6B,GAGa;AAC1C,uCAJ6B,GAIK;AAClC,qDAL6B,GAKmB;AAChD,sCAN6B,GAMI;AACjC,mDAPA,CADG,CAQ0C;AAC7C;;AACAvB,QAAAA,SAAS,CAACwB,2BAAV,GAAwC,KAAxC;AACAxB,QAAAA,SAAS,CAACyB,wBAAV,GAAqC,KAArC;AACAzB,QAAAA,SAAS,CAAC0B,uBAAV,GAAoC,KAApC;AACA1B,QAAAA,SAAS,CAAC2B,qBAAV,GAAkC,KAAlC,CAbG,CAcH;;AACJ,YAAIC,OAAO,GAAG,CAAd,CAfO,CAgBP;;AACApC,QAAAA,SAAS,KAAK,EAAd,GACEoC,OAAO,GAAG,IAAK,MAAM,EADvB,GAEEA,OAAO,GAAG,IAAKpC,SAAS,GAAG,EAF7B,CAjBO,CAoBP;;AACA,cAAMqC,WAAW,GAAG1D,KAAK,CAACC,KAAN,GAAcwD,OAAlC;AACA,cAAME,YAAY,GAAG3D,KAAK,CAACI,MAAN,GAAeqD,OAApC,CAtBO,CAuBP;;AACA5B,QAAAA,SAAS,CAACiB,SAAV,CAAoBX,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoCuB,WAApC,EAAiDC,YAAjD,EAxBO,CAyBP;;AACA9B,QAAAA,SAAS,CAACiB,SAAV,CAAoBlB,YAApB,EAAkC,CAAlC,EAAqC,CAArC,EAAwC8B,WAAxC,EAAqDC,YAArD,EAAmE,CAAnE,EAAsE,CAAtE,EAAyE3D,KAAK,CAACC,KAA/E,EAAsFD,KAAK,CAACI,MAA5F,EA1BO,CA2BN;;AACAsB,QAAAA,SAAS,CAACM,SAAV,CAAoB,CAApB,EAAsB,CAAtB,EAAyBhC,KAAK,CAACC,KAA/B,EAAsCD,KAAK,CAACI,MAA5C;AACAsB,QAAAA,SAAS,CAACoB,SAAV,CAAoBX,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,EA7BM,CA8BN;;AACA,aAAK9C,QAAL,CAAcC,IAAd,EAAoBoD,OAApB,CAA4BhD,IAAI,IAC9BgC,SAAS,CAACqB,YAAV,CACElB,SAAS,CAACmB,YAAV,CACEtD,IAAI,CAACC,CADP,EAEED,IAAI,CAACQ,CAFP,EAGER,IAAI,CAACW,CAHP,EAIEX,IAAI,CAACa,CAJP,CADF,EAMEb,IAAI,CAACC,CANP,EAOED,IAAI,CAACQ,CAPP,CADF;AAWA;AAGI,KA1FD,EA0FG0D,KA1FH,CA0FSC,GAAG,IAAI;AACZtE,MAAAA,OAAO,CAACC,GAAR,CAAYqE,GAAZ;AACH,KA5FD;AA6FD;;AAIDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7D,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAoB,KAAKL,KAAL,CAAWC,KAArC;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAW,KAAKS,KAAtB;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,CADF,eAEE;AACE,MAAA,EAAE,EAAC,QADL;AAEE,MAAA,GAAG,EAAC,QAFN;AAGE,MAAA,KAAK,EAAEE,KAHT;AAIE,MAAA,MAAM,EAAEG,MAJV;AAKE,MAAA,KAAK,EAAE;AAAC2D,QAAAA,QAAQ,EAAE,MAAX;AAAmBC,QAAAA,SAAS,EAAE;AAA9B,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAUG1E,IAAI,IAAIA,IAAI,CAACiC,MAAb,gBACC,oBAAC,MAAD;AACE,MAAA,OAAO,EAAE,KAAKd,QADhB;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,IAAI,EAAC,IAHP;AAIE,MAAA,EAAE,EAAC,iBAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBH,CADF;AAyBD;;AAnL8C","sourcesContent":["import React, { Component } from 'react';\nimport { createCanvas, loadImage } from 'canvas';\nimport { Button } from 'reactstrap';\nimport \"./BlurFaces.css\";\n\nexport default class BlurFaces extends Component {\n   \n  getFaces(data) {\n      console.log('data', data);\n      \n   \n      //result.outputs[0].data.regions[0].region_info.bounding_box\n      //[top_row, left_col, bottom_row, right_col]\n        return data.map(face => ({\n          x: (face.region_info.bounding_box.left_col) * this.props.image.width,\n          y: (face.region_info.bounding_box.top_row) * this.props.image.height,\n          w: (face.region_info.bounding_box.right_col * this.props.image.width) - (face.region_info.bounding_box.left_col * this.props.image.width),\n          h: (face.region_info.bounding_box.bottom_row * this.props.image.height) - (face.region_info.bounding_box.top_row * this.props.image.height)\n          // x: face.upperLeft.x,\n          // y: face.upperLeft.y,\n          // w: face.lowerRight.x - face.upperLeft.x,\n          // h: face.lowerRight.y - face.upperLeft.y\n        }))\n      \n      }\n\n      download(){\n        console.log('trying to download')\n        var canvas = document.getElementById(\"canvas\");\n        var url = canvas.toDataURL(\"image/png\");\n        var link = document.createElement('a');\n        link.download = 'blurred_image.png';\n        link.href = document.getElementById('canvas').toDataURL();\n        link.click();\n      }\n\n  componentDidUpdate(prevProps) {\n    const { image, threshold, data, smooth } = this.props;\n    // If no data\n    if(!data || data.length < 1) return;\n    \n    // Output Canvas and Context\n    const outputCanvas = this.refs.canvas;\n    const outputCtx = outputCanvas.getContext('2d');\n    // Hidden Canvas and Context\n    const hiddenCanvas = createCanvas(image.width, image.height);\n    const hiddenCtx = hiddenCanvas.getContext('2d');\n    \n    // If data, threshold and smooth is the same then clear and return     (user has not clicked blur)\n    if(\n      JSON.stringify(prevProps.data) === JSON.stringify(data) &&     \n      prevProps.threshold === threshold && \n      prevProps.smooth === smooth\n    ) {\n      outputCtx.clearRect(0,0, image.width, image.height);\n      return;\n    }\n\n    /// Load Image\n    loadImage(image.uri).then((newImage) => {\n      this.props.onBlurredImage()\n        if(smooth){\n            // New canvases for applying blurring and feathering (canvases for inverted mask of blurred images)\n            const imaskCanvas = createCanvas(image.width, image.height);\n            const imaskCtx = imaskCanvas.getContext('2d');\n            const imaskCanvas2 = createCanvas(image.width, image.height);\n            const imaskCtx2 = imaskCanvas2.getContext('2d');\n            // Set global composite operation to destination in\n            imaskCtx.globalCompositeOperation = \"destination-in\";\n            this.getFaces(data).forEach((face, i) => {\n                // Determine the blur amount by width of face\n                console.log(typeof(data));\n                console.log(face.x, face.y, face.w, face.h)\n                let blurAmount = threshold\n                if(face.w >= 300) blurAmount = threshold*2.5\n                else if(face.w <= 30) blurAmount = threshold*0.25\n                // Add blur filter  \n                hiddenCtx.filter = `blur(${blurAmount}px)`;\n                // Draw original image to hidden canvas\n                hiddenCtx.drawImage(newImage, 0, 0, image.width, image.height);\n                // Add blurred faces to blank canvas\n                imaskCtx.putImageData(hiddenCtx.getImageData(\n                  face.x-10, \n                  face.y-10, \n                  face.w+20, \n                  face.h+20), \n                  face.x-10, \n                  face.y-10\n                ) \n              })\n               // Draw blurred faces onto 2nd inverted mask canvas\n  imaskCtx2.drawImage(imaskCanvas, 0, 0);\n  imaskCtx2.shadowColor = \"black\"; // Required for feathering\n  imaskCtx2.shadowBlur = 30;\n  imaskCtx2.globalCompositeOperation = \"destination-in\";\n  // Feathering\n  imaskCtx2.shadowBlur = 20;\n  imaskCtx2.drawImage(imaskCanvas,0,0);\n  imaskCtx2.shadowBlur = 10;\n  imaskCtx2.drawImage(imaskCanvas,0,0);\n  // Clear visible canvas then draw original image to it and then add the blurred images\n  outputCtx.clearRect(0,0, image.width, image.height);\n  outputCtx.drawImage(newImage, 0, 0);\n  outputCtx.drawImage(imaskCanvas2, 0, 0);\n} else {\n    hiddenCanvas.style.cssText = 'image-rendering: optimizeSpeed;' +\n    'image-rendering: -moz-crisp-edges;' + // FireFox\n    'image-rendering: -o-crisp-edges;' +  // Opera\n    'image-rendering: -webkit-crisp-edges;' + // Chrome\n    'image-rendering: crisp-edges;' + // Chrome\n    'image-rendering: -webkit-optimize-contrast;' + // Safari\n    'image-rendering: pixelated; ' + // Future browsers\n    '-ms-interpolation-mode: nearest-neighbor;'; // IE\n    // Use nearest-neighbor scaling when images are resized instead of the resizing algorithm to create blur\n    hiddenCtx.webkitImageSmoothingEnabled = false;\n    hiddenCtx.mozImageSmoothingEnabled = false;\n    hiddenCtx.msImageSmoothingEnabled = false;\n    hiddenCtx.imageSmoothingEnabled = false;\n    // We'll be pixelating the image by threshold\nlet percent = 0;\n// Set threshold to 9.8 if it's 10 so the blurred faces aren't rendered white\nthreshold === 10 ?\n  percent = 1 - (9.8 / 10):\n  percent = 1 - (threshold / 10);\n// Calculate the scaled dimensions\nconst scaledWidth = image.width * percent;\nconst scaledHeight = image.height * percent;\n// Render image smaller\nhiddenCtx.drawImage(newImage, 0, 0, scaledWidth, scaledHeight);\n// Stretch the smaller image onto larger context\nhiddenCtx.drawImage(hiddenCanvas, 0, 0, scaledWidth, scaledHeight, 0, 0, image.width, image.height);\n // Clear visible canvas and draw original image to it\n outputCtx.clearRect(0,0, image.width, image.height);\n outputCtx.drawImage(newImage, 0, 0);\n // Draw pixelated faces to canvas\n this.getFaces(data).forEach(face =>  \n   outputCtx.putImageData(\n     hiddenCtx.getImageData(\n       face.x, \n       face.y, \n       face.w, \n       face.h), \n     face.x, \n     face.y\n   )\n )\n}\n\n    \n    }).catch(err => {\n        console.log(err)\n    })\n  }\n\n  \n  \n  render() {\n    const { width, height } = this.props.image;\n    const { data } = this.props;\n    return (\n      <div>\n        <p><strong>Output</strong></p>\n        <canvas\n          id=\"canvas\"\n          ref=\"canvas\"\n          width={width}\n          height={height}\n          style={{maxWidth: \"100%\", maxHeight: \"auto\"}} \n        />\n        {\n         data && data.length ?\n          <Button \n            onClick={this.download}\n            color=\"info\" \n            size=\"lg\" \n            id=\"download_button\"\n            >\n            Download\n          </Button>\n         :\n         <div></div>    \n        }\n      </div>\n    )\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}